<?php

namespace Dictionary\DictionaryBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * EnglishRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class Eng2srbRepository extends EntityRepository
{

	public function getEnglishTranslations($englishIds) {
		$results = $this->createQueryBuilder('eng2srb')
			->select('eng2srb, english, serbian')
			->innerJoin('eng2srb.eng', 'english')
			->innerJoin('eng2srb.srb', 'serbian')
			->where('english.id IN (:ids)')
			->andwhere('eng2srb.direction  = :direction')
			->andWhere('english.type = :englishType')
			->andWhere('serbian.type = :serbianType')
			->setParameters(array(
				'ids' 			=> $englishIds,
				'englishType'	=> Word::WORD_ENGLISH,
				'serbianType'	=> Word::WORD_SERBIAN,
				'direction'		=> Eng2srb::ENG_2_SRB
			))
			->orderBy('english.id, serbian.wordType, eng2srb.relevance', 'ASC')
			->getQuery()
			->getResult();
		return $results;
	}

	/**
	 * @param $english Word
	 * @param $serbian Word
	 * @param $direction integer
	 * @return mixed
	 * @throws \Doctrine\ORM\NonUniqueResultException
	 */
	public function getTranslation($english, $serbian, $direction) {
		return $this->createQueryBuilder('eng2srb')
			->select('eng2srb')
			->innerJoin('eng2srb.eng', 'english')
			->innerJoin('eng2srb.srb', 'serbian')
			->where('english = :english')
			->andWhere('eng2srb.direction = :direction')
			->andWhere('serbian = :serbian')
			->andWhere('english.type = :englishType')
			->andWhere('serbian.type = :serbianType')
			->setParameters(array(
				'english' => $english,
				'serbian' => $serbian,
				'englishType' => Word::WORD_ENGLISH,
				'serbianType' => Word::WORD_SERBIAN,
				'direction' => $direction
			))
			->getQuery()
			->getOneOrNullResult()
		;
	}
}
